#!/usr/bin/env bash

hc() {
    herbstclient "$@"
}

hc emit_hook reload

xsetroot -solid '#5A8E3A'

# Autostart 
external_monitor_connected # Monitor settings
autostart # Mouse settings
picom &
~/.fehbg
doas systemctl restart mopidy # Janky fix for mopidy on startup
mopidy-discord-rpc &

# remove all existing keybindings
hc keyunbind --all

# keybindings
# if you have a super key you will be much happier with Mod set to Mod4
Alt=Mod1   # Use alt as the alt
Mod=Mod4   # Use the super key as the main modifier

hc keybind $Mod-Control-q quit
hc keybind $Mod-Control-r reload
hc keybind $Mod-q close_or_remove
hc keybind $Mod-w close_and_remove
hc keybind $Mod-Return spawn "${TERMINAL:-kitty}"
hc keybind $Mod-space spawn rofi -matching fuzzy -show run

# basic movement in tiling and floating mode
# focusing clients
hc keybind $Mod-n     focus left
hc keybind $Mod-e     focus down
hc keybind $Mod-i     focus up
hc keybind $Mod-o     focus right

# moving clients in tiling and floating mode
hc keybind $Mod-$Alt-n     shift left
hc keybind $Mod-$Alt-e     shift down
hc keybind $Mod-$Alt-i     shift up
hc keybind $Mod-$Alt-o     shift right

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-h       split   bottom  0.5
hc keybind $Mod-v       split   right   0.5
# let the current frame explode into subframes
hc keybind $Mod-u split explode

# resizing frames and floating clients
resizestep=0.02
hc keybind $Mod-Control-n       resize left +$resizestep
hc keybind $Mod-Control-e       resize down +$resizestep
hc keybind $Mod-Control-i       resize up +$resizestep
hc keybind $Mod-Control-o       resize right +$resizestep
hc keybind $Mod-Control-Left    resize left +$resizestep
hc keybind $Mod-Control-Down    resize down +$resizestep
hc keybind $Mod-Control-Up      resize up +$resizestep
hc keybind $Mod-Control-Right   resize right +$resizestep

# Set default frame layout before creating tags
hc set default_frame_layout grid

# tags
tag_names=( {1..9} )
tag_keys=( {1..9} 0 )

hc rename default "${tag_names[0]}" || true
for i in "${!tag_names[@]}" ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" use_index "$i"
        hc keybind "$Mod-Shift-$key" move_index "$i"
        hc keybind "$Mod-$Alt-$key" chain , move_index "$i" , use_index "$i"
    fi
done

# cycle through tags
hc keybind $Mod-period use_index +1 --skip-visible
hc keybind $Mod-comma  use_index -1 --skip-visible

# layouting
hc keybind $Mod-r remove
hc keybind $Mod-$Alt-space  floating toggle
hc keybind $Mod-f fullscreen toggle
hc keybind $Mod-Control-f set_attr clients.focus.floating toggle
hc keybind $Mod-Control-m set_attr clients.focus.minimized true
# restore all minimized windows of the focused tag
hc keybind $Mod-Shift-m foreach CLIENT clients. \
     sprintf MINATT "%c.minimized" CLIENT \
     sprintf TAGATT "%c.tag" CLIENT and \
       , compare MINATT "=" "true" \
       , substitute FOCUS "tags.focus.name" compare TAGATT "=" FOCUS \
       , set_attr MINATT false
hc keybind $Mod-Control-p pseudotile toggle
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-Control-space                                                   \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1

hc keybind $Mod-l set_layout horizontal
hc keybind $Mod-Control-l set_layout grid
hc keybind $Mod-$Alt-l set_layout vertical

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind $Mod-Tab         cycle_all +1
hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-c cycle
# hc keybind $Mod-i jumpto urgent

# Volume control
hc keybind XF86AudioMute spawn pactl set-sink-mute @DEFAULT_SINK@ toggle
hc keybind XF86AudioLowerVolume spawn pactl set-sink-volume @DEFAULT_SINK@ -4%
hc keybind XF86AudioRaiseVolume spawn pactl set-sink-volume @DEFAULT_SINK@ +4%
hc keybind XF86AudioPlay spawn pulseaudio-ctl play-pause

# Brightness control
hc keybind XF86MonBrightnessUp exec "light -A 10"
hc keybind XF86MonBrightnessDown exec "light -U 10"

# Screenshots
hc keybind $Mod-Control-c spawn ss_clipboard # Copy selected area to clipboard
hc keybind $Mod-Shift-$Alt-c spawn maim -s ~/Pictures/Screenshots/$(date +%s).png # Save selected area to screenshots folder

# User programs
hc keybind $Mod-F1 chain , use_index "0" , spawn kitty -o font_size=14 newsboat
hc keybind $Mod-F2 spawn kitty vifm
hc keybind $Mod-F3 chain , use_index "2" , spawn kitty -o font_size=13 neomutt
hc keybind $Mod-F4 spawn rofi_edit
hc keybind $Mod-F5 spawn pcmanfm
hc keybind $Mod-F8 chain , use_index "7" , spawn kitty -o font_size=14 ncmpcpp
# hc keybind $Mod-Control-F8 chain , spawn killall mopidy-discord-rpc , spawn mopidy-discord-rpc
hc keybind $Mod-p spawn kitty htop
hc keybind $Mod-$Alt-p spawn bwmenu --auto-lock -1
hc keybind $Mod-k spawn kitty kak
hc keybind $Mod-b spawn qutebrowser
           
# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
hc set frame_border_active_color '#222222'
hc set frame_border_normal_color '#101010'
hc set frame_bg_normal_color '#565656'
hc set frame_bg_active_color '#345F0C'
hc set frame_border_width 0
hc set always_show_frame off
hc set frame_bg_transparent on
hc set frame_transparent_width 0
hc set frame_gap 0

hc attr theme.title_height 0
hc attr theme.title_font 'Dejavu Sans:pixelsize=12'  # example using Xft
# hc attr theme.title_font '-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*'
hc attr theme.padding_top 0  # space below the title's baseline (i.e. text depth)
hc attr theme.active.color '#9fbc00'
hc attr theme.normal.color '#454545'
hc attr theme.urgent.color orange
# hc attr theme.inner_width 0
hc attr theme.inner_color black
# hc attr theme.border_width 0
# hc attr theme.floating.border_width 0
# hc attr theme.floating.outer_width 0
hc attr theme.floating.outer_color black
hc attr theme.active.inner_color '#3E4A00'
hc attr theme.active.outer_color '#3E4A00'
hc attr theme.background_color '#141414'

hc set window_gap 5
hc set frame_padding 30
hc set focus_follows_mouse on
hc set hide_covered_windows on
hc set gapless_grid on
hc set smart_window_surroundings off
hc set smart_frame_surroundings on
hc set mouse_recenter_gap 0
hc set tree_style '╾│ ├└╼─┐'

# rules
hc unrule -F
#hc rule class=XTerm tag=3 # move all xterms to tag 3
hc rule focus=on # normally focus new clients
hc rule floatplacement=smart
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

# unlock, just to be sure
hc unlock

# do multi monitor setup here, e.g.:
# hc set_monitors 1280x1024+0+0 1280x1024+1280+0
# or simply:
hc detect_monitors

# find the panel
panel=~/.config/herbstluftwm/panel.sh
[ -x "$panel" ] || panel=/etc/xdg/herbstluftwm/panel.sh
for monitor in $(hc list_monitors | cut -d: -f1) ; do
    # start it on each monitor
    "$panel" "$monitor" &
done
