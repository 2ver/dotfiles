# Plugins
# ───────
source "%val{config}/plugins/plug.kak/rc/plug.kak"

# Install plugin manager so that 'plug-clean' does not remove plug.kak
plug "andreyorst/plug.kak" noload

# Dependency of auto-pairs
plug "alexherbo2/prelude.kak"

# Auto close {}, (), etc.
plug "alexherbo2/auto-pairs.kak" %{
   require-module prelude
   require-module auto-pairs
   auto-pairs-enable
}

# LSP server
plug "kak-lsp/kak-lsp" do %{
   cargo install --release --locked
   cargo install --force --path .
} config %{
    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
    hook global WinSetOption filetype=(c|cpp|rust|java) %{
        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor false
        # lsp-auto-hover-enable
        echo -debug "Enabling LSP for filtetype %opt{filetype}"
        lsp-enable-window
    }

    hook global WinSetOption filetype=(rust) %{
        set window lsp_server_configuration rust.clippy_preference="on"
    }

    hook global WinSetOption filetype=rust %{
        hook window BufWritePre .* %{
            evaluate-commands %sh{
                test -f rustfmt.toml && printf lsp-formatting-sync
            }
        }
    }

    hook global KakEnd .* lsp-exit
}

# Better buffer management
plug "delapouite/kakoune-buffers" %{
    map global normal b ': enter-buffers-mode<ret>' -docstring 'buffers' 						 # Open buffer keybind menu
    map global normal B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)' # Open buffer keybind menu with rapid mode enabled
}

# Open file at last edit
plug "Screwtapello/kakoune-state-save" domain "gitlab.com"

# kitty.kak
# plug "joefiorini/joeconf-kakoune-plugins" subset %{
#    plugins/kitty.kak
# }

# Discord rich presence (Buggy)
plug "abuffseagull/kakoune-discord" do %{ cargo install --path . --force } %{
     discord-presence-enable
}


# UI configuration
# ────────────────
set-option global tabstop 3			 					# Width of a tab
set-option global indentwidth 3		 					# Indent with 3 spaces
set-option global scrolloff 99,99	 					# Center cursor
set-option global ui_options ncurses_assistant=off # Disable clippy
set-option global autoreload yes 	 					# Live reload
set-option global writemethod replace 					# Live reload method

# Global highlighters
#add-highlighter global/ show-matching
#add-highlighter global/ number-lines -relative -separator '  ' # Line numbers
#add-highlighter global/ wrap -word -indent -marker ↳
#add-highlighter global/ regex \h+$ 0:Error	# Highlight trailing whitespace

# Line numbers
hook global WinCreate ^[^*]+$ %{
   add-highlighter window/ number-lines -relative -separator '  '
}

# Highlight matching brackets
 
# Normal mode
hook global WinCreate .* %{
	add-highlighter window/ show-matching
}

# Insert mode
# hook global -group kakrc-matching-ranges InsertChar '[[\](){}<>]' %{
#    eval -draft %{
#       try %{
#          exec '<esc>;hm<a-k>..<ret>;'
#          set window show_matching_range %val{timestamp} "%val{selection_desc}|MatchingChar"
#       } catch %{
#          set window show_matching_range 0
#       }
#       hook window -once InsertChar '[^[\](){}<>]' %{
#          set window show_matching_range 0
#       }
#       hook window -once ModeChange .* %{
#          set window show_matching_range 0
#       }
#       hook window -once InsertMove .* %{
#          set window show_matching_range 0
#       }
#    }
# }

# Buffer list
hook global WinDisplay .* info-buffers # Show list of buffers after switching

# Theme
# ─────

# Colorscheme
colorscheme lena

# Change selection colors in insert mode
hook global ModeChange ".*:insert" %{
	set-face window PrimarySelection black,rgb:bfbfbf+F
	set-face window SecondarySelection black,rgb:bfbfbf+u
	set-face window PrimaryCursor black,rgb:E4E4DF+b
	set-face window SecondaryCursor black,rgb:E4E4DF+u
	set-face window PrimaryCursorEol black,rgb:E4E4DF+b
	set-face window SecondaryCursorEol black,rgb:E4E4DF+u
}

# Revert cursor colors after reentering normal mode
hook global ModeChange ".*:normal" %{
	unset-face window PrimarySelection
	unset-face window SecondarySelection
	unset-face window PrimaryCursor
	unset-face window SecondaryCursor
	unset-face window PrimaryCursorEol
	unset-face window SecondaryCursorEol
}

# Kitty
# ─────

# Keyboard mappings
# ─────────────────
 
# Colemak bindings
map global normal n h 			# Select left
map global normal N H 			# Extend left
map global normal <a-n> <a-h> # Select to beginning of line
map global normal <a-N> <a-H> # Extend to beginning of line
map global normal e j 			# Select down
map global normal E J 			# Extend down
map global normal <a-e> <a-j> # Join lines
map global normal <a-E> <a-J> # Join lines and select spaces
map global normal i k 			# Select up
map global normal I K 			# Extend up
map global normal <a-i> <a-k> # Keep selections matching regex
map global normal <a-I> <a-K> # Keep selections not matching regex
map global normal o l 			# Select right
map global normal O L 			# Extend right
map global normal <a-o> <a-l> # Select to end of line
map global normal <a-O> <a-L> # Extend to end of line

# Remap displaced keys
map global normal h i 			# Insert mode
map global normal <a-h> <a-i> # Keep matching
map global normal H I         # Insert at beginning of line
map global normal j e         # End of word
map global normal J E         # Keep selecting to end of word
map global normal k n         # Search next
map global normal <a-k> <a-n> # Search previous
map global normal K N 		   # Select to next search
map global normal l o 		   # New line below
map global normal L O 		   # New line above

# Colemak navigation in goto mode
map global goto n h # Move cursor to beginning of line
map global goto e j # Move cursor to end of file
map global goto i k # Move cursor to beginning of file
map global goto o l # Move cursor to end of line

# Switch macros to ^
map global normal ^ q     # Replay macro
map global normal <a-^> Q # Start/end macro recording

# Move back by word to q
map global normal q b 			# Select by word backward
map global normal Q B 			# Extend by word backward
map global normal <a-q> <a-b> # Select by WORD backward
map global normal <a-Q> <a-B> # Extend by WORD backward

# Buffer switching mode
map global buffers k ':buffer-next<ret>' -docstring 'next' 		# Switch to next buffer
map global buffers K ':buffer-previous<ret>' -docstring 'prev' # Switch to previous buffer
map global buffers x ':buffer-only<ret>' -docstring 'only' 		# Delete other buffers
map global buffers n ':buffer-first<ret>' -docstring 'first'	# Switch to first buffer
map global buffers o ':buffer-last<ret>' -docstring 'last' 		# Switch to last buffer
map global buffers i ':buffer-by-index ' -docstring 'index' 	# Switch to buffer by index

# Leader key
map global normal <space> , # Set space to leader key
map global normal , <space> # Set comma to remove alternate cursors

# Global clipboard mappings
map global user y "<a-|> xsel -i -b<ret>" -docstring "yank the selection into the clipboard" 
map global user p "<a-!> xsel<ret>" -docstring "paste the clipboard"
map global user r "|xclip -i -selection clipboard<ret>; xclip -o -selection clipboard<ret>" -docstring "replace from clipboard"

# Smart case search (WIP)
map global user '/' %{
	:try %{
   	exec -save-regs '' <lt>a-k>[A-Z]<lt>ret>*
 	} catch %{
    	exec -save-regs '' */(?i)<lt>c-r>/<lt>ret>
 	}<ret>
}

# 'x' extends down and 'X' extends selection up
def -params 1 extend-line-down %{
  exec "<a-:>%arg{1}X"
}
def -params 1 extend-line-up %{
  exec "<a-:><a-;>%arg{1}K<a-;>"
    try %{
      exec -draft ';<a-K>\n<ret>'
      exec X
    }
    exec '<a-;><a-X>'
}
map global normal x ': extend-line-down %val{count}<ret>' # Down
map global normal X ': extend-line-up %val{count}<ret>'	 # Up

# Comment line
map global normal '#' :comment-line<ret> # Comment selected line(s)

# Shortcuts to exit
map global user w -docstring 'write' ': w<ret>' 			 # Save
map global user q -docstring 'quit' ': q<ret>'				 # Quit
map global user z -docstring 'write and quit' ': wq<ret>' # Save and quit


# Save after lost focus
hook global FocusOut .* %{
   write-all
} -group kakrc-save-on-lost-focus

# Cycle autocompletions with Tab
hook global InsertCompletionShow .* %{
   try %{
      exec -draft 'h<a-K>\h<ret>'
      map window insert <s-tab> <c-p>
      map window insert <tab> <c-n>
   }
}

hook global InsertCompletionHide .* %{
   unmap window insert <tab> <c-n>
   unmap window insert <s-tab> <c-p>
}

# File types
# ──────────

def filetype-hook -params 2 %{ hook global WinSetOption "filetype=(%arg{1})" %arg{2} }

filetype-hook man %{
   remove-highlighter window/number-lines
}

# Extensions
# ──────────

# Rofi
# define-command rofi-buffers -docstring 'Select an open buffer using Rofi' %{
#    %sh{
#       BUFFER=$(printf %s\\n "${kak_buflist}" | tr : '\n' | rofi -dmenu)
#       if [ -n "$BUFFER" ]; then
#          echo "eval -client '$kak_client' 'buffer ${BUFFER}'" | kak -p ${kak_session}
#       fi
#    }
# }

# Output debug kak-lsp debug logs
# nop %sh{
#    (kak-lsp -s $kak_session -vvv ) > /tmp/lsp_"$(date +%F-%T-%N)"_kak-lsp_log 2>&1 < /dev/null &
# }

# Globally enable kak-lsp
# lsp-enable
