# Plugins
# ───────
# source "%val{config}/plugins/plug.kak/rc/plug.kak"
# Download plugin manager if not installed
evaluate-commands %sh{
   plugins="$kak_config/plugins"
   mkdir -p "$plugins"
   [ ! -e "$plugins/plug.kak" ] && \
      git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
   printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}

# Install plug.kak so 'plug-clean' does not remove itself
plug "andreyorst/plug.kak" noload

# Dependency of auto-pairs
plug "alexherbo2/prelude.kak"

# Auto close {}, (), etc.
plug "alexherbo2/auto-pairs.kak" %{
   require-module prelude
   require-module auto-pairs
   auto-pairs-enable
}

# Use spaces instead of tabs for more consistency
plug "andreyorst/smarttab.kak" defer smarttab %{
   set-option global softtabstop %opt{indentwidth}
} config %{
   hook global WinSetOption filetype=(rust|markdown|kak|lisp|c|cpp|haskell|txt|sh) expandtab
   hook global WinSetOption filetype=(makefile) noexpandtab
}

plug "kak-lsp/kak-lsp" do %{
   cargo install --locked --force --path .
} config %{

   set global lsp_diagnostic_line_warning_sign '⚠'
   set global lsp_diagnostic_line_error_sign '✗'

	define-command lsp-restart -docstring 'restart lsp server' %{
   	lsp-exit
   	lsp-start
	}

   hook global WinSetOption filetype=(c|haskell|latex|python|rust) %{
      lsp-enable-window
      echo -debug "Enabling LSP for filetype %opt{filetype}"
		# lsp-auto-hover-enable
		set global lsp_hover_max_lines 10

		# Mappings
		map window user '<;>' ':hover<ret>' -docstring 'hover'
		map window user <:> ':lsp-code-actions<ret>' -docstring 'code actions'
		map window user <I> ':lsp-implementation<ret>' -docstring 'goto implementation'
		# unmap window <c-i>
		map window normal <tab> ':lsp-find-error<ret>' -docstring 'goto next error' # Ambiguous key (maps to <c-i>)
		map window normal <c-e> ':lsp-find-error --previous<ret>' -docstring 'goto last error'
		map window user <r> ':lsp-rename-prompt<ret>' -docstring 'rename'
		
		face global DiagnosticWarning rgb:dee681
		face global DiagnosticError rgb:e084a3
		face buffer InlayDiagnosticWarning rgba:dee68165+i
		face buffer InlayDiagnosticError rgba:e084a385+i
		lsp-diagnostic-lines-disable window
      lsp-inlay-diagnostics-enable window

      hook window NormalIdle .* %{
         rmhl window/lsp_diagnostics
         lsp-inlay-diagnostics-enable window
      }

      hook window ModeChange push:normal:insert %{
         lsp-inlay-diagnostics-disable window
      }
   }

   hook global WinSetOption filetype=(c|rust) %{
		hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
		hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
		hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
		hook -once -always window WinSetOption filetype=.* %{
   		remove-hooks window semantic-tokens
		}
   }

   hook global WinSetOption filetype=rust %{
      hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
      hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
      hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
      hook -once -always window WinSetOption filetype=.* %{
         remove-hooks window rust-inlay-hints
      }
   }

   # set-option global lsp_server_configuration pyls.configurationSources=["flake8"]
}

# Spell checking
nop plug "dmerejkowsky/kak-spell" config %{
   declare-user-mode kak-spell
   map global user s ':enter-user-mode -lock kak-spell<ret>' -docstring 'enter spell user mode'
   map global kak-spell a ':kak-spell-add<ret>' -docstring 'add the selection to the user dict'
   map global kak-spell d ':kak-spell-disable<ret>' -docstring 'clear spelling highlighters'
   map global kak-spell e ':kak-spell-enable en_US<ret> :kak-spell <ret>' -docstring 'enable spell check in English'
   map global kak-spell l ':kak-spell-list <ret>' -docstring 'list spelling errors in a buffer'
   map global kak-spell n ':kak-spell-next<ret>' -docstring 'go to next spell error'
   map global kak-spell p ':kak-spell-previous<ret>' -docstring 'go to next spell error'
   map global kak-spell r ':kak-spell-replace<ret>' -docstring 'suggest a list of replacements'
   map global kak-spell x ':kak-spell-remove<ret>' -docstring 'remove the selection from the user dict'
}

# plug "JasonBrownDeveloper/spell-comments.kak"

# Better buffer management
plug "delapouite/kakoune-buffers" %{
map global normal b ': enter-buffers-mode<ret>' -docstring "buffers" 						 # Open buffer keybind menu
    map global normal B ': enter-user-mode -lock buffers<ret>' -docstring "buffers (lock)" # Open buffer keybind menu with rapid mode enabled
    
}

# Contextual "f" searching
plug "alexherbo2/search.kak" %{
   map global normal f ':search<ret>(?i)\Q' -docstring "Jump forward"
   map global normal F <c-o> -docstring "Jump backward"
}

# Open file at last edit
plug "Screwtapello/kakoune-state-save" domain "gitlab.com" config %{
   hook global KakBegin .* %{
      state-save-reg-load colon
      state-save-reg-load pipe
      state-save-reg-load slash
   }

   hook global KakEnd .* %{
      state-save-reg-save colon
      state-save-reg-save pipe
      state-save-reg-save slash
   }
}

plug "Screwtapello/kakoune-mark-show" domain "gitlab.com"

#alias global terminal kitty-terminal
#alias global popup kitty-terminal-popup

nop %sh{
   mkdir -p "$kak_config/autoload"
   ln -s "$kak_runtime/autoload" "$kak_config/autoload/standard-library"
}

# UI configuration
# ────────────────
set-option global startup_info_version 20200901464 									# Hide change notes on startup
set-option global tabstop 3			 														# Width of a tab
set-option global indentwidth 3		 														# Indent with 3 spaces
set-option global scrolloff 99,99	 														# Center cursor
set-option global ui_options ncurses_assistant=off ncurses_status_on_top=true # Disable clippy
set-option global autoreload yes 	 														# Live reload
set-option global writemethod replace 														# Live reload method
# set-option global modelinefmt '{yellow}%opt{out_of_view_status_line}{default} {{mode_info}} {magenta}%val{client}{default} at {yellow}%val{session}{default} on {green}%val{bufname}{default} {{context_info}} {cyan}U+%sh{printf ''%04x'' "$kak_cursor_char_value"}{default} {cyan}%val{cursor_line}{default}:{cyan}%val{cursor_char_column}{default}'
# set-option global modelinefmt '{{mode_info}} {magenta}%val{client}{default} at {yellow}%val{session}{default} on {green}%val{bufname}{default} {{context_info}} {cyan}U+%sh{printf ''%04x'' "$kak_cursor_char_value"}{default} {cyan}%val{cursor_line}{default}:{cyan}%val{cursor_char_column}{default}'
set-option global modelinefmt '{{mode_info}} {green}%val{bufname}{default} {{context_info}}'

# Blank scratch buffer
hook -group delete-scratch-message global BufCreate '\Q*scratch*' %{
   execute-keys '%d'
}
  
# Color TODO, NOTE, etc. separately
hook global WinSetOption comment_line=(.*) %{
    add-highlighter -override window/todo regex "\Q%val{hook_param_capture_1}\E\h*(TODO:|FIXME:|NOTE:|XXX:)[^\n]*" 1:rgb:21c0d5+Fb
}

# Make search results bold
hook global RegisterModified '/' %{ add-highlighter -override global/search regex "%reg{/}" 0:+b }

# Global highlighters
#add-highlighter global/ wrap -word -indent -marker ↳
#add-highlighter global/ regex \h+$ 0:Error	# Highlight trailing whitespace

# Line numbers
hook global WinCreate ^[^*]+$ %{
   add-highlighter window/ number-lines -relative -separator '  '
}

# Highlight instances of currenly selected word.
# declare-option -hidden regex curword
# set-face global CurWord default,rgba:80808040

# hook global NormalIdle .* %{
#     eval -draft %{ try %{
#         exec <space><a-i>w <a-k>\A\w+\z<ret>
#         set-option buffer curword "\b\Q%val{selection}\E\b"
#     } catch %{
#         set-option buffer curword ''
#     } }
# }
# add-highlighter global/ dynregex '%opt{curword}' 0:CurWord

# Highlight matching brackets

# Normal mode
hook global WinCreate .* %{
	add-highlighter window/ show-matching
}

# Insert mode
# hook global -group kakrc-matching-ranges InsertChar '[[\](){}<>]' %{
#    eval -draft %{
#       try %{
#          exec '<esc>;hm<a-k>..<ret>;'
#          set window show_matching_range %val{timestamp} "%val{selection_desc}|MatchingChar"
#       } catch %{
#          set window show_matching_range 0
#       }
#       hook window -once InsertChar '[^[\](){}<>]' %{
#          set window show_matching_range 0
#       }
#       hook window -once ModeChange .* %{
#          set window show_matching_range 0
#       }
#       hook window -once InsertMove .* %{
#          set window show_matching_range 0
#       }
#    }
# }

# Buffer list
hook global WinDisplay .* info-buffers # Show list of buffers after switching

# Theme
# ─────

# Colorscheme
colorscheme lena

# Change selection colors in insert mode
hook global ModeChange .*:.*:insert %{
	set-face window PrimarySelection black,rgb:bfbfbf+F
	set-face window SecondarySelection black,rgb:bfbfbf+u
	set-face window PrimaryCursor black,rgb:E4E4DF+b
	set-face window SecondaryCursor black,rgb:E4E4DF+u
	set-face window PrimaryCursorEol black,rgb:E4E4DF+b
	set-face window SecondaryCursorEol black,rgb:E4E4DF+u
}

# Revert cursor colors after reentering normal mode
hook global ModeChange .*:insert:.* %{
	unset-face window PrimarySelection
	unset-face window SecondarySelection
	unset-face window PrimaryCursor
	unset-face window SecondaryCursor
	unset-face window PrimaryCursorEol
	unset-face window SecondaryCursorEol
}

# Kitty
# ─────

# Keyboard mappings
# ─────────────────

# Colemak bindings
map global normal n h 			# Select left
map global normal N H 			# Extend left
map global normal <a-n> <a-h> # Select to beginning of line
map global normal <a-N> <a-H> # Extend to beginning of line
map global normal e j 			# Select down
map global normal E J 			# Extend down
map global normal <a-e> <a-j> # Join lines
map global normal <a-E> <a-J> # Join lines and select spaces
map global normal i k 			# Select up
map global normal I K 			# Extend up
map global normal <a-i> <a-k> # Keep selections matching regex
map global normal <a-I> <a-K> # Keep selections not matching regex
map global normal o l 			# Select right
map global normal O L 			# Extend right
map global normal <a-o> <a-l> # Select to end of line
map global normal <a-O> <a-L> # Extend to end of line

# Remap displaced keys
map global normal h i 			# Insert mode
map global normal <a-h> <a-i> # Keep matching
map global normal H I         # Insert at beginning of line
map global normal j e         # End of word
map global normal J E         # Keep selecting to end of word
map global normal k n         # Search next
map global normal <a-k> <a-n> # Search previous
map global normal K N 		   # Select to next search
map global normal l o 		   # New line below
map global normal L O 		   # New line above

# Colemak navigation in goto mode
map global goto n h # Move cursor to beginning of line
map global goto e j # Move cursor to end of file
map global goto i k # Move cursor to beginning of file
map global goto o l # Move cursor to end of line

# Switch macros to ^
map global normal ^ q     # Replay macro
map global normal <a-^> Q # Start/end macro recording

# Move back by word to q
map global normal q b 			# Select by word backward
map global normal Q B 			# Extend by word backward
map global normal <a-q> <a-b> # Select by WORD backward
map global normal <a-Q> <a-B> # Extend by WORD backward

# LSP user mode
map global user l %{: enter-user-mode lsp<ret>} -docstring "LSP mode"

# Buffer switching mode
map global buffers k 	 ':buffer-next<ret>' -docstring 'next' 		# Switch to next buffer
map global buffers <a-k> ':buffer-previous<ret>' -docstring 'prev' # Switch to previous buffer
map global buffers x 	 ':buffer-only<ret>' -docstring 'only' 		# Delete other buffers
map global buffers n 	 ':buffer-first<ret>' -docstring 'first'	# Switch to first buffer
map global buffers o 	 ':buffer-last<ret>' -docstring 'last' 		# Switch to last buffer
map global buffers i 	 ':buffer-by-index ' -docstring 'index' 	# Switch to buffer by index

# Exit normal mode with ii
hook global InsertChar i %{ try %{
  exec -draft hH <a-k>ii<ret> d
  exec -with-hooks <esc>
}}

# Source selection
map global user -docstring 'source selection' . ': <c-r>.<ret>'

# Autocomplete to buffer directory in :e
map global prompt -docstring 'Expand to the buffer directory' <a-.> '%sh(dirname "$kak_buffile")<a-!>'

# Select everything matching cursor selection in buffer without searching
map global normal -docstring 'Select all occurrences of the current selection set' <a-percent> '*%s<ret>'

# Spawn terminal
# map global user <ret> ': connect-terminal<ret>' -docstring 'Open terminal'

# Leader key
map global normal <space> , 	  # Set space to leader key
map global normal , <space> 	  # Remove all selections but main
map global normal <a-,> <space> # Remove main selection

# Global clipboard mappings
map global user y "<a-|> xsel -i -b<ret>" -docstring "yank the selection into the clipboard" 
map global user p "<a-!> xsel<ret>" -docstring "paste the clipboard"
map global user r "|xclip -i -selection clipboard<ret>; xclip -o -selection clipboard<ret>" -docstring "replace from clipboard"

# Smart case search (WIP)

# map global prompt -docstring 'Case insensitive search' <a-i> '<home>(?i)<end>'

# map global user '/' %{
# 	:try %{
#    	exec -save-regs '' <lt>a-k>[A-Z]<lt>ret>*
#  	} catch %{
#     	exec -save-regs '' */(?i)<lt>c-r>/<lt>ret>
#  	}<ret>
# }

# 'x' extends down and 'X' extends selection up
def -params 1 extend-line-down %{
  exec "<a-:>%arg{1}X"
}
def -params 1 extend-line-up %{
  exec "<a-:><a-;>%arg{1}K<a-;>"
    try %{
      exec -draft ';<a-K>\n<ret>'
      exec X
    }
    exec '<a-;><a-X>'
}
map global normal x ': extend-line-down %val{count}<ret>' -docstring 'Extend selection down' # Down
map global normal X ': extend-line-up %val{count}<ret>' -docstring 'Extend selection up'     # Up

# Comment line
map global normal '#' ': comment-line<ret>' -docstring 'Comment line'       # Comment selected line(s)
map global normal '<a-#>' ': comment-block<ret>' -docstring 'Comment block' # Comment selected block

# Shortcuts to exit
map global user w -docstring 'write' ': w<ret>' 			 # Save
map global user q -docstring 'quit' ': q<ret>'				 # Quit
map global user z -docstring 'write and quit' ': wq<ret>' # Save and quit

# TODO: Open corresponding pdf to LaTeX file
map global user v -docstring 'open pdf file corresponding to current LaTeX project' '| zathura "$kak_pwd"/*\.pdf'

# Save after lost focus
hook global FocusOut .* %{
   write-all
} -group kakrc-save-on-lost-focus

# Cycle autocompletions with Tab
hook global InsertCompletionShow .* %{
   try %{
      exec -draft 'h<a-K>\h<ret>'
      map window insert <s-tab> <c-p>
      map window insert <tab> <c-n>
   }
}

hook global InsertCompletionHide .* %{
   unmap window insert <tab> <c-n>
   unmap window insert <s-tab> <c-p>
}

define-command clean-whitespace %{ execute-keys -draft '<percent>s^<space><plus>$<ret>d' }

# Extensions
# ──────────

# Rofi
# define-command rofi-buffers -docstring 'Select an open buffer using Rofi' %{
#    %sh{
#       BUFFER=$(printf %s\\n "${kak_buflist}" | tr : '\n' | rofi -dmenu)
#       if [ -n "$BUFFER" ]; then
#          echo "eval -client '$kak_client' 'buffer ${BUFFER}'" | kak -p ${kak_session}
#       fi
#    }
# }

try %{
    evaluate-commands %sh{
        if command -v kcr >/dev/null; then
            echo 'nop'
        else
            echo 'echo -debug "kcr binary missing"'
            echo 'fail'
        fi
    }

    define-command -hidden set-popup-alias %{
        alias global popup kitty-terminal-popup
    }

    hook global ModuleLoaded kitty %{
        set-popup-alias
    }

    evaluate-commands %sh{ kcr init kakoune }

    map global user <ret> ' :connect-terminal<ret>' -docstring 'open terminal'

    # declare-user-mode fzf

    # map global normal <c-p> ':enter-user-mode fzf<ret>' -docstring 'fuzzy finder mode'
    # map global fzf f ': + kcr-fzf-files<ret>' -docstring 'Open files'
    # map global fzf b ': + kcr-fzf-buffers<ret>' -docstring 'Open buffers'
    # map global fzf g ': + kcr-fzf-grep<ret>' -docstring 'Grep files'

    define-command nnn-persistent -params 0..1 -file-completion -docstring 'Open file with nnn' %{
        connect-terminal nnn %sh{echo "${@:-$(dirname "$kak_buffile")}"}
    }

    alias global nnn nnn-persistent
} catch %{
    echo -debug 'failed to initialize kakoune.cr'
}

# define-command setup-kitty -hidden %{
#     map global user t ': kitty-mode<ret>' -docstring 'kitty mode'
#     alias global new kitty-new
#     hook -group kitty-hooks global KakBegin .* %{
#         define-command -hidden set-kitty-terminal-alias %{
#             alias global terminal kitty-terminal-b
#             alias global terminal-l kitty-terminal-l
#             alias global terminal-r kitty-terminal-r
#             alias global terminal-b kitty-terminal-b
#             alias global terminal-t kitty-terminal-t
#         }
#         alias global set-terminal-alias set-kitty-terminal-alias

#         set-terminal-alias
#     }
# }

# Kitty integration
# plug "Parasrah/kitty.kak" defer kitty %{
#    define-command nnn-current -params 0..1 -file-completion -docstring 'Open file with nnn' %{
#       kitty-overlay sh -c %{
#          PAGER=""
#          kak_buffile=$1 kak_session=$2 kak_client=$3
#          shift 3
#          kak_pwd="${@:-$(dirname "${kak_buffile}")}"
#          filename=$(nnn -p - "${kak_pwd}")
#          kak_cmd="evaluate-commands -client $kak_client edit $filename"
#          echo $kak_cmd | kak -p $kak_session
#       } -- %val{buffile} %val{session} %val{client} %arg{@}
#    }

#    map global normal <minus> ': nnn-current<ret>' -docstring 'open current buffer directory in nnn'
# }
